Reserved words:
start,
subr, rout, ans,
db, dw, ptr, dba, dwa, fxd, lbl, type,
repeat, until, while, for,
//conditional stuff
if, else, 
//instrs
ld, call, ret,
add, sub, mul, div, inc, dec,
and, or, xor, neg,
rl, rr, sl, sr, res, set, flp
in, out,
im,
//block instrs
ldm, cpm, inm, outm

Reserved chars:
( ) [ ] { }
# . , " ' ;
= + - * / ^

//TODO: special rule in for clause to allow for more than constant expressions
//NOTE: ALL data declarations must be done at the start of a block; functions, ifs, elses, loops


//
//	MAIN PROG CONTROL
//

<translation_unit> ::= <external_decl>*
<external_decl> ::= <function_decl> | <function_def> | <data_decl> | <type_def>

<function_def> ::= 'subr' <identifier> '(' <parameter_list>* ')' ';'
<function_decl> ::= 'subr' <identifier> '(' <parameter_list>* ')' <compound_statement>

<data_decl> ::= <data_modifier>? <data_type> '*'? <single_data_decl> { ',' <single_data_decl> }* ';' |
				<data_modifier>? <data_type> '*'? <identifier> '[' <const_expression> ']' { '{' <initializer_list> '}' }? ';' |
				<struct_decl> |
				'label' <identifier> ';'

<single_data_decl> ::= <identifier> { '=' <arithmetic_expression> }?

<type_def> ::= 'struct' '{' <data_decl>+ '}' <identifier> ';'

//
//	DATA 
//

<struct_decl> ::= <storage_specifier>? 'struct' <identifier> '*'? <identifier>  { '[' <const_expression> ']' }? ';'
<data_type> ::= 'byte' | 'word' | 'dword' 
<data_modifier> ::= <storage_specifier> | 'signed' | <storage_specifier> 'signed' | 'signed' <storage_specifier>
<storage_specifier> ::= 'static' | 'auto' | 'stack'
//struct arrays are initialized from within the struct def itself, not upon an object decl

//
//	STATEMENTS
//

<compound_statement> ::= '{' <statement>* '}'

<statement> ::= <open_statement> | <closed_statement>
//at least one if not paired with an else
<open_statement> ::= <selection_clause> <statement>									|
						<selection_clause> <closed_statement> 'else' <open_statement> |
						<while_clause> <open_statement>								|
						<for_clause> <open_statement>
//either no if or an if paired with an else
<closed_statement> ::= <simple_statement>												|
						<selection_clause> <closed_statement> 'else' <closed_statement>	|
						<while_clause> <closed_statement>								|
						<for_clause> <closed_statement>
//Does NOT end with a statement/selection_statement
<simple_statement> ::= 'repeat' <compound_statement> 'until' '(' <expression> ')' ';'	|
						<instruction>													|
						<data_decl>														|
						<label_def>														|
						<compound_statement>
<selection_clause> ::= if '(' <expression> ')'
<for_clause> ::= 'for' '(' <data_type>  <single_data_decl> ')'
<while_clause> ::= 'while' '(' <logical_expression> ')'
<label_def> ::= <identifier> ':'


//
//	INSTRUCTIONS
//

//expressions
//basically, instructions will do you the courtesy of dereferencing, referencing, etc. but no more.
//arrays can be used with constant expression indexing
//no adds or sub expressions
//memory should allow: ., .., [], *, &

<instruction> ::= { <i_one> | <i_two> | <i_three> | <i_one_to_two> | <i_one_to_three> | <i_one_to_infinite> | <i_comp> | <i_cpm> } ';'


<instruction_1_ops>		::= { 'jp' | 'inc' | 'dec' | 'im' | 'neg' }
							<memory_expression>														//im 0/1/2;
<instruction_2_ops>		::= { 'res' | 'set' | 'flp' | 'in' | 'out' }
							<memory_expression> ',' <mem_or_const_expression>						//res/set/flp mem, bit; in/out dest, port;
<instruction_3_ops>		::= { 'ldm'| 'inm' | 'outm' }
							<memory_expression> ',' <memory_expression> ',' <mem_or_const_expression> //ldm dest, src, size; inm/outm dest, port, size
<instruction_1to2_ops>	::= { 'rl' | 'rr' }	
							<memory_expression> { ',' <mem_or_const_expression> }?					//rl/rr mem, shift_amt; shift_amt defaults to 1. Do not deal with carry flag! - using rrc & rlc
<instruction_1to3_ops>	::= { 'sl' | 'sr' }	
							<memory_expression>  { ',' <constant>  { ',' <mem_or_const_expression> }? }? //sl/sr mem, fill, shift_amt; Defaults to 0, 1. Do not deal with carry flag! - fill 0 zeros the first shifted bit, fill 1 sets bit0 in sl, does not change bit 7 in sr
<instruction_2toinf_ops>::= { 'ld' | 'add' | 'sub' | 'mult' | 'div' | 'mod' | 'and' | 'or' | 'xor' }
							<memory_expression> { ',' <mem_or_const_expression> }+					//ld dst1, dst2, ... ,src. others dst, src_n, src_n-1, ..., src_1
<instruction_comp>		::= 'comp'
							<memory_expression> ',' <arithmetic_expression>
<instruction_cpm>		::= 'cpm'
							<memory_expression> ',' <memory_expression> ',' <memory_expression> ',' <mem_or_const_expression>	//result, src1, src2, size
<instruction_ret>		::= 'ret'
							{ <logical_expression> }+
<instruction_call>		::= 'call'
							<memory_expression>  { ',' <mem_or_const_expression> }*

//=========================================================================================================//

add, sub, mult, div, mod :'ld' <logical_unary_expression> { ',' <logical_unary_expression> }+
jp, call, inc, dec, im: 'jp' <logical_unary_expression> 
ret: 'ret' { <logical_unary_expression> }?
comp: 'comp' <mathematical_expression>
rl, rr: 'rl' <logical_unary_expression> { ',' <logical_unary_expression> }?
sl, sr: 'sl' <logical_unary_expression>  { ',' <boolean_constant>  { ',' <logical_unary_expression> }? }?
res, set, flp, in, out: 'res' <logical_unary_expression> ',' <logical_unary_expression>
ldm, inm, outm: 'ldm' <logical_unary_expression> , <logical_unary_expression> , <mathematical_expression> //Do I even want to support this, or should I just make this a constant?

//=========================================================================================================//


//
//	MISC
//

<initializer_list> ::= <constant_expression> { ',' <constant_expression> }*

<parameter> ::= <data_type> <identifier>			//labels and arrays CANNOT be passed to a function!
<parameter_list> ::= <parameter> { ',' <parameter> }*

<identifier> ::= text
<constant> ::= <bool_const> | <dec_const> | <hex_const> | <fxd_const>


//=========================================================================================================//
//	EXPRESSIONS
//	Used for data decls (constant), conditionals, COMP
//	conditionals need:	logical or/and, equality, relational, logical not/dereference (unary), postfix.
//	decls need:			shift, additive, multiplicative, minus [unary?]
//	COMP needs:			shift, additive, multiplicative, minus [unary?], postfix.
//	
//	Note: An array in a conditional can be indexed with a CONSTANT arithmetic expression
//		
//
//	Order of Operations -
//		Conditional:	.. . [] & * ! >= <= > < != == && || 
//						Post===Unary=Rel========Equ==AndOr=													//
//		Math:			.. . [] & * - % / * - + >> <<														//
//						Post===Unary===Mult=Add=Shift														//
//		Mem:			.. . [] & * 																			//
//																											//
//																											//
// Note: Unary minus, not, dereference, and indirection are all right associative.							//
//==========================================================================================================//

//
//	Conditional Expressions
//

<logical_expression> ::= <or_expression>
<memory_expression> ::= <logical_postfix_expression> //reject the logical not, keep ., .., [], &, *

<or_expression> ::=				<and_expression> { '||' <and_expression> }*
<and_expression> ::=			<equality_expression> { '&&' <equality_expression> }*
<equality_expression> ::=		<relational_expression> { { '==' | '!=' } <relational_expression> }*
<relational_expression> ::=		<logical_postfix_expression> { {'<' | '>' | '<=' | '>=' } <logical_postfix_expression> }*
<logical_postfix_expression> ::=<logical_primary_expression> { { { '.' | '..' } <identifier> } | '[' <constant_expression> ']' }*
<logical_primary_expression> ::=<identifier> | <constant> | <string> | '(' <logical_expression> ')' | { '&' | '*' | '!' } <logical_expression>


//
//	Math Expressions
//

<constant_expressions> ::= <shift_expression> // reject variables in semantic checking
<arithmetic_expression> ::= <shift_expression>

<shift_expression> ::=				<additive_expression> { { '<<' | '>>' } <additive_expression> }*
<additive_expression> ::=			<multiplicative_expression> { { '+' | '-' } <multiplicative_expression> }*
<multiplicative_expression> ::=		<arithmetic_postfix_expression> { { '*' | '/' | '%' } <arithmetic_postfix_expression> }*
<arithmetic_postfix_expression> ::=	<arithmetic_primary_expression> 
									{ { { '.' | '..' } <identifier> } | '[' <arithmetic_expression> ']' }*
<arithmetic_primary_expression> ::=	<identifier> | <constant> | '(' <arithmetic_expression> ')' | { '&' | '*' | '-' } <arithmetic_expression>

//
// Memory Expressions
//

//ex. ld var1.var2[var3], var4[1].var5[2 * 4];
//FIXME: parentheses

<mem_or_const_expression> ::= <memory_expression> | <constant_expression> //implementation: test mem first, then const
<memory_expression> ::= <memory_primary_expression> { { { '.' | '..' } <memory_primary_expression> } | '[' <const_expression> ']' }*
<memory_primary_expression> ::= <identifier> | { '&' | '*' } <identifier>