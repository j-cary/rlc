RLS (Register-Less Assembly) Tentative Description

Syntax is meant to be very similar to regular z80 assembly. In addition, however, it has higher-level constructs like block-statements,
if-statements, and type-checking.

Functions:
	functions are declared like so: subr subroutine1 ( db byte1, dw word1, ptr ptr1, fxd fxd1);
	and are define like so: subr subroutine1 () { <statements> }
	//Note: the entry function may be defined using the 'start' keyword instead of subr
	//Note: Arrays and labels cannot be passed as parameters

Data Declarations:
	single data entries can be declared like so: 
		db byte1;
		db byte1 = $00;
		db byte1, byte2;
		db byte1, byte2 = $00;
		type usertype_t uservar1;
		type usertype_t uservar1 = 0; // initializes all member variables of 'uservar1' to 0
		etc.
	array data entries can be declared like so:
		dba bytearray1 = { $00, 0 + 4 * 2 }; // the initializer list must NOT be empty, and must only contain constant expressions!
		dba byrearray1[2 * 4]; //The size of the array must be determined by a constant expression
		dba byrearray1[2 * 4] = { 0 };  // The size of the initializer list must not exceed the size of the array


Reserved words:
inl, func, ans, //ans is the return value from the last function
byte, word, ptr, array, struct, type,
repeat, until, while, for, skip, escape,
if, else, 
//instrs
ld, call, ret,
add, sub, mul, div, mod, inc, dec, //mul, div, and mod are software instructions
and, or, xor, //bit logic
//rlc, rrc, rl, rr, sla, sra, sll, srl, res, set, flp //bit shifts and manipulation
rl, rr, sl, sr, res, set, flp
in, out, //port i/o
im, //interrupt mode
ldm, cpm, inm, outm //block ld, cp, in, out instructions

//!!!FIXME - implement skip/escape loop control keywords